name: Build and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: renatus-cartesius/fuckupboard

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        if: |
          contains(github.event.head_commit.modified, 'main.go') ||
          contains(github.event.head_commit.modified, 'go.mod') ||
          contains(github.event.head_commit.modified, 'go.sum') ||
          contains(github.event.head_commit.modified, 'Dockerfile.backend')
#          github.event_name == 'pull_request'
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.10'

      - name: Install CGO dependencies
        if: |
          contains(github.event.head_commit.modified, 'main.go') ||
          contains(github.event.head_commit.modified, 'go.mod') ||
          contains(github.event.head_commit.modified, 'go.sum') ||
          contains(github.event.head_commit.modified, 'Dockerfile.backend')
#          github.event_name == 'pull_request'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libc6-dev libsqlite3-dev

      - name: Test backend
        if: |
          contains(github.event.head_commit.modified, 'main.go') ||
          contains(github.event.head_commit.modified, 'go.mod') ||
          contains(github.event.head_commit.modified, 'go.sum') ||
          contains(github.event.head_commit.modified, 'Dockerfile.backend')
#          github.event_name == 'pull_request'
        run: |
          cd ${{ github.workspace }}
          CGO_ENABLED=1 go test -v ./...

      - name: Set up Node.js
        if: |
          contains(github.event.head_commit.modified, 'frontend/') ||
          contains(github.event.head_commit.modified, 'frontend/Dockerfile')
#          github.event_name == 'pull_request'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        if: |
          contains(github.event.head_commit.modified, 'frontend/') ||
          contains(github.event.head_commit.modified, 'frontend/Dockerfile')
#          github.event_name == 'pull_request'
        run: |
          cd frontend
          npm ci

      # - name: Test frontend
      #   if: |
      #     contains(github.event.head_commit.modified, 'frontend/') ||
      #     contains(github.event.head_commit.modified, 'frontend/Dockerfile') ||
      #     github.event_name == 'pull_request'
      #   run: |
      #     cd frontend
      #     npm test -- --watchAll=false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build number
        id: build_number
        run: |
          echo "number=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=raw,value=master-${{ steps.build_number.outputs.number }}
            type=raw,value=latest

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=raw,value=master-${{ steps.build_number.outputs.number }}
            type=raw,value=latest

      - name: Build and push backend image
        if: |
          contains(github.event.head_commit.modified, 'main.go') ||
          contains(github.event.head_commit.modified, 'go.mod') ||
          contains(github.event.head_commit.modified, 'go.sum') ||
          contains(github.event.head_commit.modified, 'Dockerfile.backend')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

      - name: Build and push frontend image
        if: |
          contains(github.event.head_commit.modified, 'frontend/') ||
          contains(github.event.head_commit.modified, 'frontend/Dockerfile')
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            REACT_APP_API_URL=http://fuckupboard-backend:8080

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Login to GHCR on remote server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            "echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin"

      - name: Run Ansible deployment
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/deploy.yml
          inventory: ${{ secrets.SERVER_HOST }}
          options: |
            --private-key ~/.ssh/id_rsa
            -u ubuntu
            -e backend_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}
            -e frontend_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}
            -e ansible_user=ubuntu
            -e ghcr_auth_token="${{ github.actor }}:${{ secrets.GHCR_PAT }}"
        env:
          ANSIBLE_HOST_KEY_CHECKING: false 
